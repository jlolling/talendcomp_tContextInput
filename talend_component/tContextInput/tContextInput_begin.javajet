<%@ jet 
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.IProcess
		org.talend.core.model.process.IContextManager
		org.talend.core.model.process.IContext
		org.talend.core.model.process.IContextParameter
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.utils.NodeUtil
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.Collections
		java.util.Comparator
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
   INode node = (INode)codeGenArgument.getArgument();
   String cid = node.getUniqueName();
   boolean loadContext = "true".equals(ElementParameterParser.getValue(node, "__LOAD_CONTEXT_FILES__"));
   boolean applyReplacementsToFilter = "true".equals(ElementParameterParser.getValue(node, "__APPLY_REPLACEMENTS_TO_FILTER__"));
   List<Map<String, String>> filterList = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__CONTEXT_FILE_FILTERS__");
   boolean decryptPasswords = "true".equals(ElementParameterParser.getValue(node, "__DECRYPT_PASSWORDS__"));
   boolean setMasterPw = "true".equals(ElementParameterParser.getValue(node, "__SET_MASTER_PASSWORD__"));
   String masterPw = ElementParameterParser.getValue(node, "__MASTER_PASSWORD__");
   if (masterPw == null || masterPw.trim().isEmpty()) {
   	masterPw = "null";
   }
   boolean allowFileIncludes = "true".equals(ElementParameterParser.getValue(node, "__ALLOW_FILE_INCLUDES__"));
   boolean loadAsSingleton = "true".equals(ElementParameterParser.getValue(node, "__LOAD_SINGLETON__"));
   List<Map<String, String>> replacerList = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__PARAM_REPLACEMENT__");
   String fileIncludePattern = ElementParameterParser.getValue(node, "__FILE_INCLUDE_KEY_PATTERN__");
   boolean printOnlyThisJobsVars = "true".equals(ElementParameterParser.getValue(node, "__PRINT_ONLY_FOR_CURR_JOB__"));
   boolean printOnlyPromptVars = "true".equals(ElementParameterParser.getValue(node, "__PRINT_ONLY_PROMPT__"));
   boolean forceLoading = "true".equals(ElementParameterParser.getValue(node, "__FORCE_LOADING__"));
%>
    System.out.println("########## Job: " + jobName + " Version: " + jobVersion + " Context: " + contextStr + " ##########");
<%	if (setMasterPw) { %>
	{
		String masterPwd = <%=masterPw%>;
		if (masterPwd != null && masterPwd.trim().isEmpty() == false) {
			de.jlo.talendcomp.context.TalendContextPasswordUtil.setMasterPassword(routines.system.PasswordEncryptUtil.decryptPassword(masterPwd));
		}
	}
<%	} %>
    de.jlo.talendcomp.context.ContextLoader <%=cid%> = new de.jlo.talendcomp.context.ContextLoader();
<%	if (loadContext) { %>
    <%=cid%>.setForceLoading(<%=forceLoading%>);
   	if (<%=cid%>.contextLoadAlreadyDone() == false) {
   		System.out.println("Will perform context load...");
   	}
	<%=cid%>.setDecryptPasswords(<%=decryptPasswords%>);
<%		if (allowFileIncludes) { %>
	<%=cid%>.setEnableIncludes(true);
	<%=cid%>.setIncludeKeyFilter(<%=fileIncludePattern%>);
<%		} %>
	// add filter list
<%		if (filterList != null) {
   		for (Map<String, String> config : filterList) {
   			String fileFilter = config.get("FILE_FILTER");
   			boolean ignoreMissing = "true".equals(config.get("IGNORE_MISSING")); %>
    <%=cid%>.addFileFilter(<%=fileFilter%>, <%=ignoreMissing%>);	
<%   		}
		}
    }
%>
	// add value replacements
<%	if (replacerList != null) {
   	for (Map<String, String> replacer : replacerList) {
   		String placeHolder = replacer.get("PLACEHOLDER");
   		String value = replacer.get("VALUE"); 
   		String convertMethod = replacer.get("VALUE_CASE_CHANGE"); %> 
		{
			String value = <%=value%>;
<%   		if ("UPPERCASE".equals(convertMethod)) { %>
			if (value != null) {
				value = value.toUpperCase();
			}
<%   		} else if ("LOWERCASE".equals(convertMethod))  { %>
			if (value != null) {
				value = value.toLowerCase();
			}
<%   		} %>
   		<%=cid%>.addValueReplacement(<%=placeHolder%>, value);
		}
<%   	}
	}
%>
<%	if (loadContext) {
	if (applyReplacementsToFilter) { %>
	<%=cid%>.replacePlaceHoldersInFileFilters();
<%	} %>
	// load properties files
	try {
		boolean loaded = <%=cid%>.loadProperties();
		globalMap.put("<%=cid%>_CONTEXT_LOADED", loaded);
<%		if (loadAsSingleton) { %>
		de.jlo.talendcomp.context.ContextLoader.preventFurtherJobsFromLoading();
<%		} %>
	} catch (Exception le) {
		String message = "Load properties failed: " + le.getMessage();
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw new Exception(message, le);
	}
<%	} %>
<%	IProcess process = node.getProcess();
	IContextManager cm = process.getContextManager();
	IContext ctx = cm.getDefaultContext();
	List<IContextParameter> ctxParamList = new ArrayList<IContextParameter>();
	if (ctx != null) {
		ctxParamList = ctx.getContextParameterList();
	} else {
		ctxParamList = new ArrayList<IContextParameter>(); // dummy list
	} %>
	// load job internal context vars and replace job values with loaded values
<%	for (IContextParameter param : ctxParamList) { %>
	try { // context variable: <%=param.getName()%>
		<%=cid%>.addJobContextParameterValue("<%=param.getName()%>", context.<%=param.getName()%>, <%=param.isPromptNeeded()%>);
   	if (<%=cid%>.isPropertyValueLoadedFromFile("<%=param.getName()%>")) {
<% 	if (param.getType().contains("Date")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToDate(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("Int")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToInteger(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("Float")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToFloat(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("Short")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToShort(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("Double")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToDouble(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("Long")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToLong(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("BigDecimal")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToBigDecimal(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("BigInteger")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToBigInteger(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("Boolean")) { %>
			context.<%=param.getName()%> = de.jlo.talendcomp.context.TypeUtil.convertToBoolean(<%=cid%>.getContextParamValue("<%=param.getName()%>"));
<%		} else if (param.getType().contains("String")) { %>
			context.<%=param.getName()%> = (String) <%=cid%>.getContextParamValue("<%=param.getName()%>");
<%		} else if (param.getType().contains("File")) { %>
			context.<%=param.getName()%> = (String) <%=cid%>.getContextParamValue("<%=param.getName()%>");
<%		} else if (param.getType().contains("Dir")) { %>
			context.<%=param.getName()%> = (String) <%=cid%>.getContextParamValue("<%=param.getName()%>");
<%		} else if (param.getType().contains("Password")) { %>
			context.<%=param.getName()%> = (String) <%=cid%>.getContextParamValue("<%=param.getName()%>");
<%		} else { %>
			context.<%=param.getName()%> = <%=cid%>.getContextParamValue("<%=param.getName()%>");
<%		} %>
		} // if (<%=cid%>.isPropertyValueLoadedFromFile("<%=param.getName()%>")
	} catch (Exception ex) {
		throw new Exception("Error loading value from context variable: <%=param.getName()%>", ex); 
	}
<%	} // for (IContextParameter param : ctxParamList)
	String contextVarConnName = null;
	List<? extends IConnection> contextVarConns = node.getOutgoingConnections("CONTEXT_VARIABLES");
	if (contextVarConns != null && contextVarConns.isEmpty() == false) {
	    IConnection outConn = contextVarConns.get(0);
	    contextVarConnName = outConn.getName();
	} %>
	<%=cid%>.setupContextParameters();
	List<de.jlo.talendcomp.context.ContextParameter> <%=cid%>_ctxlist = <%=cid%>.getContextParameterValues();
	for (de.jlo.talendcomp.context.ContextParameter param : <%=cid%>_ctxlist) {
		if (param.getValue() != null) {
			context.setProperty(param.getName(), de.jlo.talendcomp.context.TypeUtil.toString(param.getValue()));
		}
<%	if (contextVarConnName != null) { %>
		<%=contextVarConnName%>.VAR_NAME = param.getName();
		if (<%=contextVarConnName%>.VAR_NAME.toLowerCase().contains("passw") || <%=contextVarConnName%>.VAR_NAME.toLowerCase().contains("secret")) {
			<%=contextVarConnName%>.VAR_VALUE = "********";
		} else {
			<%=contextVarConnName%>.VAR_VALUE = de.jlo.talendcomp.context.TypeUtil.toString(param.getValue());
		}
		<%=contextVarConnName%>.CONFIGURED_IN_CURR_JOB = param.isConfigured();
<%		if (printOnlyThisJobsVars) { %>
		if (<%=contextVarConnName%>.CONFIGURED_IN_CURR_JOB == false) {
			continue;
		}
<%		} %>
		<%=contextVarConnName%>.IS_PROMPT = param.isPrompt();
<%		if (printOnlyPromptVars) { %>
		if (<%=contextVarConnName%>.IS_PROMPT == false) {
			continue;
		}
<%		} %>
		<%=contextVarConnName%>.SOURCE_FILE = (param.getSourceFile() != null ? param.getSourceFile() : "");
<%	} %>